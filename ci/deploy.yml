steps:
  - ? "${{ if
      and(
        succeeded(),
        ne(variables['Build.Reason'], 'PullRequest'),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/master'),
          eq(variables.tagged, True)
        )
      )
    }}"
  :
    - script: |
        set -euo pipefail

        version="$(
          xmllint \
            --xpath '//Version[last()]/text()' \
            src/SourceEngine.Demo.Parser/SourceEngine.Demo.Parser.csproj
        )-build.${BUILD_BUILDID}"

        printf '%s\n' "Version read from project file: ${version}"
        printf '%s\n' "##vso[task.setvariable variable=VERSION]${version}"
      displayName: 'Read version'
      condition: and(succeeded(), eq(variables.tagged, False))

    - task: DotNetCoreCLI@2
      displayName: 'Pack projects'
      inputs:
        command: pack
        # searchPatternPack: 'src/*/*.csproj'
        searchPatternPack: src/SourceEngine.Demo.Parser/SourceEngine.Demo.Parser.csproj
        configuration: $(configuration)
        outputDir: $(Build.ArtifactStagingDirectory)
        includesymbols: true
        nobuild: true
        ${{ if eq(variables.tagged, False) }}:
          versioningScheme: byEnvVar
          versionEnvVar: VERSION

    - task: DotNetCoreCLI@2
      displayName: 'Push packages'
      inputs:
        command: push
        searchPatternPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
        nugetFeedType: external
        externalEndPoint: NuGetServiceConnection
